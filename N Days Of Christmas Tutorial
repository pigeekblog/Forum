We all love Christmas, and what we love the most is Christmas songs. Unfortunately, most Christmas songs just don’t go on for long enough. Songs like ‘The Twelve Days of Christmas’ would be so much better if you they could be stretched out a little longer. How about ‘The Fifty Days of Christmas’, ‘The Hundred Days of Christmas’, or even ‘The Thousand Days of Christmas’!

In this resource, you’ll be creating a Python script to produce the lyrics to The N Days of Christmas where N is any number you want it to be. That way, when you go out carol singing, you only need to remember the lyrics to one, very long, song.

Getting the text files.

In ‘The Twelve Days of Christmas’, the lyrics follow a general trend of:
•Twelve nouns a-doing
•Eleven nouns a-doing
•Ten nouns a-doing

To create your program you’re going to need a long list of nouns and a long list of verbs.
1.Create a new directory called n-days, to save both the files in
2.The nouns.txt file can be downloaded here
3.The words.txt file can be downloaded here

Importing the words
1.Open Python 3 (IDLE) and create a new file called christmas.py. Save it in your n-day directory.
2.To make the song as interesting as possible, you’re going to need to randomly pick words. So at the top of your file, you can import the choice function from the random module. from random import choice

3.Next, you can create a function which will allow you to open text files. def load_words(text_file):
    with open(text_file, 'r', encoding='utf8') as f:
        words = f.read()
    return words

4.You can see what the first thirty characters in words contain by switching to the Python interpreter. words = load_words('nouns.txt') 
words[0:30]

5.This isn’t much use to you, but you can convert the long string into a list by using splitlines(). Edit your file so it looks like this: def load_words(text_file):
    with open(text_file, 'r', encoding='utf8') as f:
        words = f.read().splitlines()
    return words

6.Save and run your file, then switch back to the interpreter and have a look at words now. words = load_words('nouns.txt') 
words[0:30]

7.Now words consists of a list of words, the string having been broken up at every newline.

Getting all the verbs and nouns

Getting all the nouns is easy, as you can just pass the nouns.txt into your load_words function. The verbs are a little trickier: they’re in words.txt somewhere, but you’re going to have to find them.
1.To start with you can load the words up into two separate lists and create an empty list, ready to store your verbs. def get_matching(items):
    nouns = load_words('nouns.txt')
    words = load_words('words.txt')
    verbs = []

You can locate all the verbs by finding words that end in ‘-ing’. A little bit of string slicing can help you here. Switch over to the interpreter and try out the examples outlined in the following steps.

2.This gets you the first character of the string Hello. 'Hello'[0]

3.To get the first three characters you could type: 'Hello'[0:3]

4.Or even just: 'Hello'[:3]

5.To get the last character you could type: 'Hello'[-1]

6.And to get the last three characters you can type: 'Hello'[-3::]

7.This technique can be used to check if a word ends in ing; if it does, you can add it to your list of verbs. def get_matching(items):
    nouns = load_words('nouns.txt')
    words = load_words('words.txt')

    verbs = []
    for word in words:
        if word[-3::] == 'ing':
            verbs.append(word)


Getting some random nouns
1.You can get some random nouns by shuffling the list of nouns, and then popping off the end of the list inside a loop. rand_nouns = []
shuffle(nouns)
for item in range(items):
    rand_nouns.append(nouns.pop())


Pairing verbs and nouns.

In The Twelve Days of Christmas, the verbs and nouns are often alliterative, which means they share the same first letter:
•Swans a Swimming
•Maids a Milking
•Lords a Leaping
•Pipers Piping
•Drummers Drumming

In your version of the song, nouns and verbs will always be alliterative, so you’re going to need to build up a dictionary of nouns, with corresponding verbs that share the same letter.
1.You can start by creating an empty dictionary inside the get_matching() function: matching = {}

2.Next you want to iterate through the random nouns you have selected, and add each one to the dictionary as a key, with an empty list as its value. for noun in rand_nouns:
    matching[noun] = []

3.Still within that loop, you can iterate through all the verbs, and if the first character of the verb is the same as the first character of the noun, you can add them to the list for that noun.   for verb in verbs:
      if verb[0].upper() == noun[0].upper():
          matching[noun].append(verb)

4.Finally you want to return the matching dictionary.
5.Your whole function should now look like this: def get_matching(items):
    nouns = load_words('nouns.txt')
    words = load_words('words.txt')

    verbs = []
    for word in words:
        if word[-3::] == 'ing':
            verbs.append(word)

  rand_nouns = []
  shuffle(nouns)
  for item in range(items):
      rand_nouns.append(nouns.pop())

    matching = {}
    for noun in rand_nouns:
        matching[noun] = []
        for verb in verbs:
            if verb[0].upper() == noun[0].upper():
                matching[noun].append(verb)

    return matching

6.Save and run the code, then switch over to the interpreter and test it out. >>> matching = get_matching(12)
>>> matching.keys()


Turning loops to list comprehensions

You can skip this step if you like as you are only going to re-factor your code. If you don’t want to play with comprehensions, just move down to the next section. Otherwise, read on!

At the moment you have a three loops all producing data structures such as lists and dictionaries.

There’s another way of producing these, though, using list and dictionary comprehensions.
1.These four lines of code: verbs = []                
for word in words:        
    if word[-3::] == 'ing':
        verbs.append(word) 

can be condensed down to:
verbs = [word for word in words if word[-3::] == 'ing']

2.These lines of code: rand_nouns = []                     
for item in range(items):           
    rand_nouns.append(choice(nouns))

can be condensed down to
rand_nouns = []
shuffle(nouns)
for item in range(items):
    rand_nouns.append(nouns.pop())

3.Lastly, the following code:   matching = {}                                 
  for noun in rand_nouns:                       
      matching[noun] = []                       
      for verb in verbs:                        
          if verb[0].upper() == noun[0].upper():
              matching[noun].append(verb)

can be condensed down to:
matching = {rand_nouns[item]:[verb for verb in verbs if verb[0].upper() == rand_nouns[item][0].upper()] for item in range(items)}

4.Your function should now look like: def get_matching(items):
    nouns = load_words('nouns.txt')
    words = load_words('words.txt')
    verbs = [word for word in words if word[-3::] == 'ing']
    shuffle(nouns)
    rand_nouns = [nouns.pop() for item in range(items)]
    matching = {rand_nouns[item]:[verb for verb in verbs if verb[0].upper() == rand_nouns[item][0].upper()] for item in range(items)}
    return matching

5.You can use either of your get_matching functions, but remember to comment out the one you don’t use.

Getting suffixes for numerals

How do we deal with numbers in our program? Remember that the first line of the song changes, depending on which day we begin with. You might have:

‘On the third day of Christmas…’

or

‘On the eighth day of Christmas…’

with the suffix on the number changing between -st, -nd, -rd and -th

You can create a new function to handle this.
1.Define a new function called get_suffix. def get_suffix(num):

2.A dictionary would be a useful way of storing the suffixes. def get_suffix(num):
    endings = {1:'st',2:'nd',3:'rd',4:'th'}

3.With a clever bit of maths, we can find out the suffix for any number. The rules are:
•If the number is between 10 and 20 then the suffix is -th, or…
•If the last digit of the number is greater than 3, then the suffix is -th, or…
•If the last digit of the number is 0, then the suffix is -th, or…
•If the number ends in 1, 2, or 3 the suffix is -st, -nd and -rd, respectively.
1.So how do you get the last digit of a number? You can use a handy operator called modulo, which finds the remainder after a division. In Python you use the symbol %
2.Try this in the interpreter to get the remainder of dividing by 2 12 % 2
11 % 2

3.Or to get the remainder of dividing by 5 15 % 5
14 % 5

4.Now see what happens when you find the remainder of division by 10 20 % 10
12 % 10
6 % 10

5.You always get the last digit of the number. Go back to your get_suffix function, and you can code up the rules stated above. def get_suffix(num):
    endings = {1:'st',2:'nd',3:'rd',4:'th'}
    if 10 < num < 20 or num % 10 > 3 or num % 10 == 0:
        return 'th'
    else:
        return endings[num%10]


Printing the whole song

The last step is to actually print your song
1.Create a new function that takes the number of days in the song as an argument. def display_song(days):

2.You’re going to keep the last five lines of the traditional song as they are, so the number of noun:verb pairs you will need is five fewer than the number of days. def display_song(days):
    matching = get_matching(days-5)

3.Now you can print the first line, including the correct suffix. def display_song(days):
    matching = get_matching(days-5)
    print('On the', str(days) + get_suffix(days), 'day of Christmas, my true love sent to me')

4.Next you want to to get a list of all the nouns in the matching dictionary. def display_song(days):
    matching = get_matching(days-5)
    print('On the', str(days) + get_suffix(days), 'day of Christmas, my true love sent to me')
    nouns = list(matching.keys())

5.You can iterate over this list, and so long as the number of the day is greater than five, you can print off matching noun and verb pairs. If the number of the day hits five, then the loop can break. Because there are five fewer nouns and verbs than there are ‘days of Christmas’, and because lists are indexed from zero, you’ll need to subtract six from days to get the correct index. def display_song(days):
    matching = get_matching(days-5)

    print('On the', str(days) + get_suffix(days), 'day of Christmas, my true love sent to me')

    nouns = list(matching.keys())
    for day in range(days,0,-1):
        if day  <= 5:
            break
        else:
            print(day, nouns[day-6]+'s', 'a', choice(matching[nouns[day-6]]))

6.To finish off the function, you can print off the standard end to the song. The function should look like this: def get_suffix(num):
    endings = {1:'st',2:'nd',3:'rd',4:'th'}
    if 10 < num < 20 or num % 10 > 3 or num % 10 == 0:
        return 'th'
    else:
        return endings[num%10]

def display_song(days):
    matching = get_matching(days-5)

    print('On the', str(days) + get_suffix(days), 'day of Christmas, my true love sent to me')

    nouns = list(matching.keys())
    for day in range(days,0,-1):
        if day  <= 5:
            break
        else:
            print(day, nouns[day-6]+'s', 'a', choice(matching[nouns[day-6]]))
    print('5 Gold rings')
    print('4 Calling birds')
    print('3 French hens')
    print('2 Turtle Doves')
    print('and a Partridge in a pair tree')

7.To finish off the song, you can ask the user for the number of days, and then run the display_song function. days = int(input('How many days of Christmas are there?'))
display_song(days)

8.Run your code, and type in the total number of days you want to use. (There are only 2120 words in nouns.txt so that is the limit.)

What next?
•Why not try and finish the song in a more random style? Maybe you could use a list of animals and descriptive nouns, along with a list of jewellery.
•What other songs could you write an algorithm for? 5 Little Ducks? 10 Green Bottles? 5 Current Buns in a Baker’s Shop?
